#!/usr/bin/env node

/**
 * Database Connection Fix Script
 * Following AGENT_CONTEXT_ULTIMATE.md requirements for production-ready database fixes
 */

const { Pool } = require('pg');
const fs = require('fs');
const path = require('path');

// Test different database connection strings
const connectionTests = [
  {
    name: 'Local PostgreSQL (default)',
    config: {
      connectionString: 'postgresql://localhost:5432/mizan',
      ssl: false
    }
  },
  {
    name: 'Local PostgreSQL with postgres user',
    config: {
      connectionString: 'postgresql://postgres@localhost:5432/mizan',
      ssl: false
    }
  },
  {
    name: 'Local PostgreSQL with current user',
    config: {
      connectionString: `postgresql://${process.env.USER}@localhost:5432/mizan`,
      ssl: false
    }
  },
  {
    name: 'Environment DATABASE_URL',
    config: {
      connectionString: process.env.DATABASE_URL || 'postgresql://localhost:5432/mizan',
      ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false
    }
  }
];

// Test a specific connection
async function testConnection(config, name) {
  const pool = new Pool(config);
  
  try {
    console.log(`üîç Testing ${name}...`);
    const client = await pool.connect();
    
    // Test basic query
    const result = await client.query('SELECT version()');
    console.log(`‚úÖ ${name}: Connection successful`);
    console.log(`   PostgreSQL: ${result.rows[0].version.split(' ')[0]}`);
    
    // Test if mizan database exists
    const dbCheck = await client.query(
      "SELECT 1 FROM pg_database WHERE datname = 'mizan'"
    );
    
    if (dbCheck.rows.length > 0) {
      console.log(`   Database 'mizan': Exists`);
    } else {
      console.log(`   Database 'mizan': Does not exist`);
    }
    
    client.release();
    await pool.end();
    return { success: true, config };
  } catch (error) {
    console.log(`‚ùå ${name}: ${error.message}`);
    await pool.end();
    return { success: false, error: error.message };
  }
}

// Create database if it doesn't exist
async function createDatabase(config) {
  const pool = new Pool(config);
  
  try {
    console.log('üîç Creating mizan database...');
    const client = await pool.connect();
    
    // Check if database exists
    const dbExists = await client.query(
      "SELECT 1 FROM pg_database WHERE datname = 'mizan'"
    );
    
    if (dbExists.rows.length === 0) {
      await client.query('CREATE DATABASE mizan');
      console.log('‚úÖ Created mizan database');
    } else {
      console.log('‚úÖ mizan database already exists');
    }
    
    client.release();
    await pool.end();
    return true;
  } catch (error) {
    console.error('‚ùå Failed to create database:', error.message);
    await pool.end();
    return false;
  }
}

// Create working .env file
function createWorkingEnv(workingConfig) {
  const envContent = `# Mizan Platform - Working Database Configuration
# Generated by fix-database-connection.js

# Database Configuration
DATABASE_URL=${workingConfig.connectionString}

# Authentication & Security
JWT_SECRET=dev-jwt-secret-key-for-development-only
SESSION_SECRET=dev-session-secret-key-for-development-only
JWT_EXPIRES_IN=7d

# Application Configuration
NODE_ENV=development
PORT=5000
LOG_LEVEL=info

# CORS Configuration
CLIENT_URL=http://localhost:3000
FRONTEND_URL=http://localhost:3000
CORS_ORIGINS=http://localhost:3000,http://localhost:3001
`;

  const envPath = path.join(__dirname, '..', '.env');
  
  try {
    fs.writeFileSync(envPath, envContent);
    console.log('‚úÖ Created working .env file');
    return true;
  } catch (error) {
    console.error('‚ùå Failed to create .env file:', error.message);
    return false;
  }
}

// Main fix function
async function fixDatabaseConnection() {
  console.log('üöÄ Fixing database connection issues...\n');
  
  let workingConfig = null;
  
  // Test all connection configurations
  for (const test of connectionTests) {
    const result = await testConnection(test.config, test.name);
    if (result.success) {
      workingConfig = test.config;
      break;
    }
  }
  
  if (!workingConfig) {
    console.log('\n‚ùå No working database connection found.');
    console.log('\nüí° To fix this issue:');
    console.log('1. Install PostgreSQL: brew install postgresql (macOS)');
    console.log('2. Start PostgreSQL: brew services start postgresql (macOS)');
    console.log('3. Create database: createdb mizan');
    console.log('4. Or set DATABASE_URL environment variable');
    process.exit(1);
  }
  
  console.log(`\n‚úÖ Found working connection: ${workingConfig.connectionString}`);
  
  // Create database if needed
  const dbCreated = await createDatabase(workingConfig);
  if (!dbCreated) {
    console.log('‚ùå Failed to create database');
    process.exit(1);
  }
  
  // Create working .env file
  const envCreated = createWorkingEnv(workingConfig);
  if (!envCreated) {
    console.log('‚ùå Failed to create .env file');
    process.exit(1);
  }
  
  console.log('\nüéâ Database connection fixed!');
  console.log('‚úÖ Working connection found');
  console.log('‚úÖ Database created/verified');
  console.log('‚úÖ Environment file updated');
  console.log('\nNext steps:');
  console.log('1. Run: npm run dev (to start the server)');
  console.log('2. Test: curl http://localhost:5000/health');
}

// Run fix if called directly
if (require.main === module) {
  fixDatabaseConnection().catch(console.error);
}

module.exports = { fixDatabaseConnection, testConnection, createDatabase };
