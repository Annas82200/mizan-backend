#!/usr/bin/env node

/**
 * Development Setup Script
 * Following AGENT_CONTEXT_ULTIMATE.md requirements for development environment
 */

const fs = require('fs');
const path = require('path');

// Create .env file for development
function createEnvFile() {
  const envContent = `# Mizan Platform - Development Environment
# Generated by dev-setup.js

# Database Configuration
DATABASE_URL=postgresql://localhost:5432/mizan

# Authentication & Security
JWT_SECRET=dev-jwt-secret-key-for-development-only
SESSION_SECRET=dev-session-secret-key-for-development-only
JWT_EXPIRES_IN=7d

# Application Configuration
NODE_ENV=development
PORT=5000
LOG_LEVEL=info

# CORS Configuration
CLIENT_URL=http://localhost:3000
FRONTEND_URL=http://localhost:3000
CORS_ORIGINS=http://localhost:3000,http://localhost:3001
`;

  const envPath = path.join(__dirname, '..', '.env');
  
  try {
    fs.writeFileSync(envPath, envContent);
    console.log('‚úÖ Created .env file for development');
    return true;
  } catch (error) {
    console.error('‚ùå Failed to create .env file:', error.message);
    return false;
  }
}

// Check if PostgreSQL is available
async function checkPostgreSQL() {
  const { Pool } = require('pg');
  
  try {
    console.log('üîç Checking PostgreSQL availability...');
    const pool = new Pool({
      connectionString: 'postgresql://localhost:5432/postgres',
      ssl: false
    });
    
    const client = await pool.connect();
    const result = await client.query('SELECT version()');
    console.log('‚úÖ PostgreSQL is running:', result.rows[0].version.split(' ')[0]);
    
    client.release();
    await pool.end();
    return true;
  } catch (error) {
    console.error('‚ùå PostgreSQL not available:', error.message);
    console.log('\nüí° To install PostgreSQL:');
    console.log('  macOS: brew install postgresql && brew services start postgresql');
    console.log('  Ubuntu: sudo apt-get install postgresql postgresql-contrib');
    console.log('  Windows: Download from https://www.postgresql.org/download/');
    return false;
  }
}

// Create database if it doesn't exist
async function createDatabase() {
  const { Pool } = require('pg');
  
  try {
    console.log('üîç Creating mizan database...');
    
    // Connect to postgres database
    const postgresPool = new Pool({
      connectionString: 'postgresql://localhost:5432/postgres',
      ssl: false
    });
    
    const client = await postgresPool.connect();
    
    // Check if database exists
    const dbExists = await client.query(
      "SELECT 1 FROM pg_database WHERE datname = 'mizan'"
    );
    
    if (dbExists.rows.length === 0) {
      await client.query('CREATE DATABASE mizan');
      console.log('‚úÖ Created mizan database');
    } else {
      console.log('‚úÖ mizan database already exists');
    }
    
    client.release();
    await postgresPool.end();
    return true;
  } catch (error) {
    console.error('‚ùå Failed to create database:', error.message);
    return false;
  }
}

// Main setup function
async function setupDevelopment() {
  console.log('üöÄ Setting up development environment...\n');
  
  // Step 1: Create .env file
  const envCreated = createEnvFile();
  if (!envCreated) {
    console.log('‚ùå Failed to create environment file');
    process.exit(1);
  }
  
  // Step 2: Check PostgreSQL
  const pgAvailable = await checkPostgreSQL();
  if (!pgAvailable) {
    console.log('\n‚ö†Ô∏è PostgreSQL not available. Please install and start PostgreSQL first.');
    console.log('Then run: npm run setup:db');
    process.exit(1);
  }
  
  // Step 3: Create database
  const dbCreated = await createDatabase();
  if (!dbCreated) {
    console.log('‚ùå Failed to create database');
    process.exit(1);
  }
  
  console.log('\nüéâ Development environment setup completed!');
  console.log('‚úÖ Environment file: Created');
  console.log('‚úÖ PostgreSQL: Available');
  console.log('‚úÖ Database: Ready');
  console.log('\nNext steps:');
  console.log('1. Run: npm run setup:db (to run migrations)');
  console.log('2. Run: npm run dev (to start the server)');
}

// Run setup if called directly
if (require.main === module) {
  setupDevelopment().catch(console.error);
}

module.exports = { setupDevelopment, createEnvFile, checkPostgreSQL, createDatabase };
